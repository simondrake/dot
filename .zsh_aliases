
#########################################################################
#                       Aliases                                         #
#########################################################################

alias vf='vim $(fzf)'
# Only show modified/deleted files
alias gvf='vim $(git ls-files -md --full-name | fzf --bind "f1:execute(vim {} < /dev/tty > /dev/tty 2>&1)")'

alias cpn='copy-paste-notes'

# fzf with bat
alias bfzf='fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"'

# Search hidden files, skip version control ignore files, case-insensitive
alias agi='ag --hidden --skip-vcs-ignore --ignore-case --ignore ".git"'
# Same as above, but only returns the files and not the individual lines
alias agif='ag --files-with-matches --ignore-case --skip-vcs-ignore --hidden --ignore ".git"'

# Run the last line as sudo
alias fuck='sudo $(fc -ln -1)'

# SSH with the kitten plugin
alias kssh='kitty +kitten ssh'

######## ZSH #######
alias reload='exec zsh'

######## IDE #######
alias ogl='open -a "/Applications/GoLand.app"'

######## Notifications #######
alias nd='terminal-notifier -message "Task has completed!" -title "Terminal"'

######## Vim #######
alias vi="nvim"
alias vim="nvim"
alias oldvim='NVIM_APPNAME="nvim-bak" nvim'
alias vinone="vim --clean -u DEFAULTS -U NONE -i NONE"

## As well as these aliases
alias notes="nvim ~/notes.md"
alias todo="nvim ~/todo.md"
alias journal="nvim ~/journal.md"

######## formatting #######
alias jsontoyaml="dasel -r json -w yaml"
alias yamltojson="dasel -r yaml -w json"


######## Terraform #######
# alias cleanLocal="rm -rf ./deploy/terraform && git checkout $(git rev-parse --abbrev-ref HEAD) -- deploy/terraform"

######## AWS #######
alias awslocal="aws --no-cli-pager --endpoint-url=http://minikube:34566"
alias localdynamo="aws --endpoint-url=http://minikube:34566 dynamodb"
alias locals3="aws --endpoint-url=http://minikube:34566 s3"

######## Kubectl #######
alias k="kubectl"

alias kc="kubectl create"

alias kd="kubectl delete"

alias kg="kubectl get"

######## Other Kubectl #######
alias kds="kubectl delete stacks"
alias kdas="kubectl delete stacks --all"
alias kdps="kubectl delete phantomstacks"
alias kdaps="kubectl delete phantomstacks --all"
alias kdn="kubectl delete networks"
alias kdan="kubectl delete networks --all"
alias kdpj="kubectl delete provisioningjobs"
alias kdapj="kubectl delete provisioningjobs --all"

alias kes="kubectl edit stacks"
alias keps="kubectl edit phantomstacks"
alias ken="kubectl edit networks"
alias kepj="kubectl edit provisioningjobs"

alias kgs="kubectl get stacks"
alias kgsjson="kubectl get stacks -o json"

alias kgps="kubectl get phantomstacks"
alias kgn="kubectl get networks"
alias kgpj="kubectl get provisioningjobs"
alias kgp="kubectl get pods"
alias kgcj="kubectl get cronjobs"

######## GIT ############
alias g='git'

# cd to root git directory
alias git-root='cd $(git rev-parse --show-toplevel)'

alias ga='git add'
alias gaa='git add --all'
alias gaf='git add --force'

alias gb='git --no-pager branch'
alias gbd='git branch -d'
alias gbD='git branch -D'

alias gc='git commit -v'
alias gcb='git checkout -b'
# alias gcm='git checkout master'
alias gcmsg='git commit -m'
alias gco='git checkout'
alias gcor='git checkoutr'

alias gd='git diff'
alias gdca='git diff --cached'
alias gdcw='git diff --cached --word-diff'
alias gdct='git describe --tags $(git rev-list --tags --max-count=1)'
alias gds='git diff --staged'
alias gdt='git diff-tree --no-commit-id --name-only -r'
alias gdw='git diff --word-diff'

alias ggrep='git --no-pager grep'

alias gpsup='git push --set-upstream origin $(git_current_branch)'

alias gl='git pull'
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias glols="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat"
alias glod="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
alias glods="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias glola="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias glp="_git_log_prettily"

alias gm='git merge'

alias gp='git push'
alias gpf!='git push --force'

alias gri="git rebase --interactive"
alias grio="git rebase --interactive origin"

alias gs='git status'

alias gsh='git stash'
alias gshc='git stash clear'
alias gshl='git stash list'
alias gshp='git stash pop'

alias latestTag='git tag -l | sort -V | tail -n 1'

######## Docker Commands #######

# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run daemonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Execute interactive container, e.g., $dex base /bin/bash
alias dex="docker exec -i -t"

# Stop all containers
dstop() { docker stop $(docker ps -a -q); }

# Remove all containers
drm() { docker rm $(docker ps -a -q); }

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Remove all images
dri() { docker rmi $(docker images -q); }

dockerCleanAll() {
  # Stop all running containers
  docker stop $(docker ps -aq)
  # Remove all containers
  docker rm $(docker ps -aq)
  # Remove all images
  docker rmi $(docker images -q)
}

# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }

# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

# Bash into running container
dbash() { docker exec -it $(docker ps -aqf "name=$1") bash; }

######## General Commands ########
alias csshX="noglob csshX"
alias catLatest="cat \"\$(ls -rt | tail -n1)\""

alias updateCloudctl="brew update && brew upgrade toolbox/tap/cloudctl"


######## Curl ########
alias curlstarttransfer="curl -s -o /dev/null -w '%{time_starttransfer}\n' $@"
alias curltimetotal="curl -s -o /dev/null -w '%{time_total}\n' $@"


######## golangci-lint Commands ########

# Run golangci-lint to find all issues introduced since the branch passed in as $1
glciFromBranch() {
  golangci-lint run --enable-all --disable=exhaustivestruct --disable=lll --disable=gci --disable=wrapcheck --disable=paralleltest --no-config --max-issues-per-linter=0 --max-same-issues=0 --new-from-rev="$1" ./...
}

######## OS Specific #######
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
elif [[ "$OSTYPE" == "cygwin" ]]; then
    # POSIX compatibility layer and Linux environment emulation for Windows
elif [[ "$OSTYPE" == "msys" ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
elif [[ "$OSTYPE" == "win32" ]]; then
    # I'm not sure this can happen.
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    # ...
else
    # Unknown.
fi
